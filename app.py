import streamlit as st
import pandas as pd
import random
import os
from PIL import Image

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Sistema Completo de Res√≠duos",
    page_icon="‚ôªÔ∏è",
    layout="wide"
)

# Carregar dados
@st.cache_data

def load_data():
    polimeros = pd.read_csv("polimeros.csv", sep=";")
    residuos = pd.read_csv("residuos.csv", sep=";")
    return polimeros, residuos

polimeros, residuos = load_data()

# Configura√ß√£o de imagens
IMAGES_DIR = "imagens_materiais"

# Fun√ß√£o para mostrar o gloss√°rio com imagens
def mostrar_glossario():
    st.header("üìñ Gloss√°rio Interativo")

    dataset = st.radio(
        "Selecione a base de dados:",
        ["Pol√≠meros", "Res√≠duos"],
        horizontal=True
    )

    df = polimeros if dataset == "Pol√≠meros" else residuos

    # Barra de busca
    search_term = st.text_input("üîç Buscar por termo, sigla ou aplica√ß√£o:")

    # Filtragem
    if search_term:
        mask = df.apply(
            lambda row: row.astype(str).str.contains(search_term, case=False).any(),
            axis=1
        )
        df = df[mask]

    # Exibi√ß√£o dos itens
    for _, row in df.iterrows():
        sigla = row['Sigla'] if 'Sigla' in row else row['Sigla ou Nome']
        image_path = os.path.join(IMAGES_DIR, f"{sigla.lower()}.jpg")

        col1, col2 = st.columns([1, 3])

        with col1:
            if os.path.exists(image_path):
                st.image(Image.open(image_path), width=200)
            else:
                st.warning("Imagem n√£o dispon√≠vel")

        with col2:
            st.markdown(f"""
            **Nome:** {row['Nome'] if 'Nome' in row else row['Categoria']}  
            **Sigla:** {sigla}  
            **Tipo:** {row.get('Tipo de Polimeriza√ß√£o', row.get('Classe ABNT', '-'))}  
            **Composi√ß√£o:** {row.get('Composi√ß√£o Qu√≠mica', '-')}  
            **Recicl√°vel:** {row.get('Recicl√°vel', '-')}  
            **Aplica√ß√µes:** {row.get('Aplica√ß√µes Comuns', row.get('Aplica√ß√µes ou Exemplos', '-'))}
            """)

        st.divider()

# Atividades Pedag√≥gicas
def mostrar_atividades():
    st.header("üìö Atividades Pedag√≥gicas")

    tab1, tab2, tab3 = st.tabs(["Fundamental", "M√©dio", "Superior"])

    with tab1:
        st.markdown("""
        ### 1. Identifica√ß√£o de Pol√≠meros
        **Objetivo:** Reconhecer tipos de pl√°sticos pelos s√≠mbolos  
        **Materiais:** Amostras de embalagens com c√≥digos de reciclagem
        """)

    with tab2:
        st.markdown("""
        ### 1. An√°lise de Propriedades
        **Objetivo:** Testar densidade e resist√™ncia de materiais  
        **Materiais:** Amostras de diferentes pol√≠meros
        """)

    with tab3:
        st.markdown("""
        ### 1. An√°lise de Ciclo de Vida
        **Objetivo:** Comparar impactos ambientais de materiais  
        **Materiais:** Dados de produ√ß√£o e decomposi√ß√£o
        """)

# Quiz melhorado
def generate_quiz_questions():
    questions = []

    samples_polimeros = polimeros.sample(min(10, len(polimeros)))
    for _, row in samples_polimeros.iterrows():
        correta = row['S√≠mbolo Reciclagem']
        alternativas_erradas = list(set(["‚ôª", "‚ô≥", "‚ô∫", "‚ô∂", "‚ôº"]) - {correta})
        opcoes = random.sample(alternativas_erradas, min(3, len(alternativas_erradas))) + [correta]
        random.shuffle(opcoes)

        questions.append({
            "pergunta": f"Qual o s√≠mbolo de reciclagem do **{row['Nome']}** ({row['Sigla']})?",
            "opcoes": opcoes,
            "resposta": opcoes.index(correta),
            "explicacao": f"O s√≠mbolo correto para {row['Nome']} √© **{correta}**."
        })

    samples_residuos = residuos.sample(min(10, len(residuos)))
    classes_possiveis = residuos['Classe ABNT'].dropna().unique().tolist()
    for _, row in samples_residuos.iterrows():
        correta = row['Classe ABNT']
        erradas = list(set(classes_possiveis) - {correta})
        opcoes = random.sample(erradas, min(3, len(erradas))) + [correta]
        random.shuffle(opcoes)

        questions.append({
            "pergunta": f"Qual a classifica√ß√£o ABNT para **{row['Categoria']}** ({row['Sigla ou Nome']})?",
            "opcoes": opcoes,
            "resposta": opcoes.index(correta),
            "explicacao": f"A classifica√ß√£o correta √© **{correta}**."
        })

    random.shuffle(questions)
    return questions

def mostrar_quiz():
    st.header("üß† Quiz de Res√≠duos e Pol√≠meros")

    if 'questions' not in st.session_state:
        st.session_state.questions = generate_quiz_questions()
        st.session_state.current_question = 0
        st.session_state.score = 0

    questions = st.session_state.questions
    q_num = st.session_state.current_question

    if q_num < len(questions):
        question = questions[q_num]

        st.progress((q_num + 1) / len(questions))
        st.subheader(f"Pergunta {q_num + 1} de {len(questions)}")
        st.markdown(f"**{question['pergunta']}**")

        selected = st.radio("Escolha uma alternativa:", question['opcoes'], key=f"q{q_num}")

        if st.button("Confirmar", key=f"b{q_num}"):
            if selected == question['opcoes'][question['resposta']]:
                st.success(f"‚úÖ Correto! {question['explicacao']}")
                st.session_state.score += 1
            else:
                st.error(f"‚ùå Errado. {question['explicacao']}")

            st.session_state.current_question += 1
            st.experimental_rerun()

    else:
        score = st.session_state.score
        total = len(questions)
        percentual = score / total

        st.balloons()
        st.success(f"üéØ Pontua√ß√£o Final: {score}/{total}")

        if percentual == 1:
            st.info("üåü Excelente! Voc√™ acertou tudo!")
        elif percentual >= 0.75:
            st.info("üëè Muito bom! Voc√™ tem um bom dom√≠nio do conte√∫do.")
        elif percentual >= 0.5:
            st.warning("üîç Razo√°vel, mas vale revisar os materiais.")
        else:
            st.error("üìö Vamos estudar mais um pouco? Explore o gloss√°rio!")

        if st.button("Refazer Quiz"):
            st.session_state.questions = generate_quiz_questions()
            st.session_state.current_question = 0
            st.session_state.score = 0
            st.experimental_rerun()

# Interface principal
def main():
    tab1, tab2, tab3, tab4 = st.tabs([
        "üè∑Ô∏è Gloss√°rio",
        "üß† Quiz",
        "üìö Atividades",
        "‚ÑπÔ∏è Sobre"
    ])

    with tab1:
        mostrar_glossario()

    with tab2:
        mostrar_quiz()

    with tab3:
        mostrar_atividades()

    with tab4:
        st.header("Sobre o Projeto")
        st.markdown("""
        **Gloss√°rio Interativo de Res√≠duos e Pol√≠meros**  
        - Desenvolvido para educa√ß√£o ambiental  
        - Dados t√©cnicos baseados em normas ABNT  
        - Integrado com atividades pedag√≥gicas
        """)

if __name__ == "__main__":
    if not os.path.exists(IMAGES_DIR):
        os.makedirs(IMAGES_DIR)
    main()
