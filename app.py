import streamlit as st
import pandas as pd
from PIL import Image

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Sistema de Gest√£o de Res√≠duos - Prefeitura",
    page_icon="üöõ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Fun√ß√µes para carregar dados
@st.cache_data
def carregar_residuos():
    return pd.read_csv("residuos.csv", encoding='utf-8', quotechar='"')

@st.cache_data
def carregar_polimeros():
    return pd.read_csv("polimeros.csv", encoding='utf-8', quotechar='"')

# Cabe√ßalho com logo
col1, col2 = st.columns([1, 4])
with col1:
    st.image(Image.open("logo_prefeitura.png"), width=150)  # Substitua pelo seu logo
with col2:
    st.title("‚ôªÔ∏è Sistema Integrado de Gest√£o de Res√≠duos")

# Menu de navega√ß√£o
menu = st.sidebar.radio(
    "MENU PRINCIPAL",
    options=["üè† Dashboard", "üìö Gloss√°rio de Res√≠duos", "üß™ Gloss√°rio de Pol√≠meros", "üó∫Ô∏è Mapa de Coleta"],
    index=0
)

# ========================
# DASHBOARD PRINCIPAL
# ========================
if menu == "üè† Dashboard":
    st.header("üìä Painel de Controle Operacional")
    
    # Carrega dados
    df_residuos = carregar_residuos()
    df_polimeros = carregar_polimeros()
    
    # M√©tricas
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("Total de Res√≠duos Catalogados", len(df_residuos))
    with col2:
        st.metric("Pol√≠meros Registrados", len(df_polimeros))
    with col3:
        perigoso = len(df_residuos[df_residuos['Classe ABNT'] == 'I'])
        st.metric("Res√≠duos Perigosos", f"{perigoso} ({perigoso/len(df_residuos):.1%})")
    
    # Gr√°ficos
    st.subheader("Distribui√ß√£o por Categoria")
    tab1, tab2 = st.tabs(["Res√≠duos", "Pol√≠meros"])
    
    with tab1:
        st.bar_chart(df_residuos['Categoria'].value_counts())
    with tab2:
        st.bar_chart(df_polimeros['Tipo de Polimeriza√ß√£o'].value_counts())

# ========================
# GLOSS√ÅRIO DE RES√çDUOS
# ========================
elif menu == "üìö Gloss√°rio de Res√≠duos":
    df = carregar_residuos()
    
    st.header("üìö Gloss√°rio de Res√≠duos")
    st.markdown("Cat√°logo completo de res√≠duos s√≥lidos com classifica√ß√£o qu√≠mica e ambiental")
    
    # Filtros avan√ßados
    with st.expander("üîç Filtros Avan√ßados", expanded=True):
        col1, col2, col3 = st.columns(3)
        with col1:
            categorias = st.multiselect(
                "Categoria",
                options=df["Categoria"].unique(),
                default=df["Categoria"].unique()
            )
        with col2:
            classes = st.multiselect(
                "Classe ABNT",
                options=df["Classe ABNT"].unique(),
                default=df["Classe ABNT"].unique()
            )
        with col3:
            reciclavel = st.selectbox(
                "Reciclabilidade",
                options=["Todos"] + list(df["Recicl√°vel"].unique())
            )
    
    # Aplicar filtros
    df_filtrado = df[
        (df["Categoria"].isin(categorias)) & 
        (df["Classe ABNT"].isin(classes))
    ]
    if reciclavel != "Todos":
        df_filtrado = df_filtrado[df_filtrado["Recicl√°vel"] == reciclavel]
    
    # Visualiza√ß√£o dos dados
    st.subheader(f"üìã Resultados ({len(df_filtrado)} itens)")
    
    with st.expander("üîç Busca por texto", expanded=False):
        busca = st.text_input("Digite termos para busca:")
        if busca:
            df_filtrado = df_filtrado[
                df_filtrado.apply(lambda row: busca.lower() in str(row).lower(), axis=1)
            ]
    
    # Exibi√ß√£o em abas
    tab1, tab2 = st.tabs(["Visualiza√ß√£o Tabular", "Detalhes"])
    
    with tab1:
        st.dataframe(
            df_filtrado,
            use_container_width=True,
            height=500,
            hide_index=True,
            column_order=["Categoria", "Sigla ou Nome", "Classe ABNT", "Recicl√°vel", "Destina√ß√£o"]
        )
    
    with tab2:
        if not df_filtrado.empty:
            selected = st.selectbox(
                "Selecione um res√≠duo para detalhes:",
                options=df_filtrado["Sigla ou Nome"]
            )
            
            dados = df_filtrado[df_filtrado["Sigla ou Nome"] == selected].iloc[0]
            
            col1, col2 = st.columns(2)
            with col1:
                st.markdown(f"**Categoria:** {dados['Categoria']}")
                st.markdown(f"**Nome/Sigla:** {dados['Sigla ou Nome']}")
                st.markdown(f"**Composi√ß√£o Qu√≠mica:** {dados['Composi√ß√£o Qu√≠mica']}")
                st.markdown(f"**Classe ABNT:** {dados['Classe ABNT']}")
            
            with col2:
                st.markdown(f"**Recicl√°vel:** {dados['Recicl√°vel']}")
                st.markdown(f"**Destina√ß√£o:** {dados['Destina√ß√£o']}")
                st.markdown(f"**Aplica√ß√µes/Exemplos:**")
                st.info(dados["Aplica√ß√µes ou Exemplos"])

# ========================
# GLOSS√ÅRIO DE POL√çMEROS
# ========================
elif menu == "üß™ Gloss√°rio de Pol√≠meros":
    df = carregar_polimeros()
    
    st.header("üß™ Gloss√°rio de Pol√≠meros")
    st.markdown("Cat√°logo t√©cnico de pol√≠meros e suas aplica√ß√µes")
    
    # Filtros avan√ßados
    with st.expander("üîç Filtros Avan√ßados", expanded=True):
        col1, col2 = st.columns(2)
        with col1:
            tipos = st.multiselect(
                "Tipo de Polimeriza√ß√£o",
                options=df["Tipo de Polimeriza√ß√£o"].unique(),
                default=df["Tipo de Polimeriza√ß√£o"].unique()
            )
            origem = st.multiselect(
                "Origem",
                options=df["Aquisi√ß√£o"].unique(),
                default=df["Aquisi√ß√£o"].unique()
            )
        with col2:
            reciclavel = st.selectbox(
                "Reciclabilidade",
                options=["Todos"] + list(df["Recicl√°vel"].unique())
            )
            cadeia = st.multiselect(
                "Tipo de Cadeia",
                options=df["Tipo de Cadeia"].unique(),
                default=df["Tipo de Cadeia"].unique()
            )
    
    # Aplicar filtros
    df_filtrado = df[
        (df["Tipo de Polimeriza√ß√£o"].isin(tipos)) &
        (df["Aquisi√ß√£o"].isin(origem)) &
        (df["Tipo de Cadeia"].isin(cadeia))
    ]
    if reciclavel != "Todos":
        df_filtrado = df_filtrado[df_filtrado["Recicl√°vel"] == reciclavel]
    
    # Visualiza√ß√£o dos dados
    st.subheader(f"üìã Resultados ({len(df_filtrado)} pol√≠meros)")
    
    with st.expander("üîç Busca por texto", expanded=False):
        busca = st.text_input("Digite termos para busca:")
        if busca:
            df_filtrado = df_filtrado[
                df_filtrado.apply(lambda row: busca.lower() in str(row).lower(), axis=1)
            ]
    
    # Exibi√ß√£o em abas
    tab1, tab2 = st.tabs(["Visualiza√ß√£o Tabular", "Detalhes T√©cnicos"])
    
    with tab1:
        st.dataframe(
            df_filtrado,
            use_container_width=True,
            height=500,
            hide_index=True,
            column_order=["Nome", "Sigla", "Tipo de Polimeriza√ß√£o", "Recicl√°vel", "Aplica√ß√µes Comuns"]
        )
    
    with tab2:
        if not df_filtrado.empty:
            selected = st.selectbox(
                "Selecione um pol√≠mero para detalhes t√©cnicos:",
                options=df_filtrado["Nome"]
            )
            
            dados = df_filtrado[df_filtrado["Nome"] == selected].iloc[0]
            
            col1, col2 = st.columns(2)
            with col1:
                st.markdown(f"**Nome:** {dados['Nome']}")
                st.markdown(f"**Sigla:** {dados['Sigla']}")
                st.markdown(f"**Tipo de Polimeriza√ß√£o:** {dados['Tipo de Polimeriza√ß√£o']}")
                st.markdown(f"**Mon√¥mero(s):** {dados['Mon√¥mero(s)']}")
            
            with col2:
                st.markdown(f"**Composi√ß√£o Qu√≠mica:** {dados['Composi√ß√£o Qu√≠mica']}")
                st.markdown(f"**Tipo de Cadeia:** {dados['Tipo de Cadeia']}")
                st.markdown(f"**Recicl√°vel:** {dados['Recicl√°vel']}")
            
            st.markdown("**Aplica√ß√µes Comuns:**")
            st.info(dados["Aplica√ß√µes Comuns"])

# ========================
# MAPA DE COLETA
# ========================
elif menu == "üó∫Ô∏è Mapa de Coleta":
    st.header("üó∫Ô∏è Mapa de Coleta de Res√≠duos")
    
    # Dados fict√≠cios para exemplo (substitua pelos seus dados reais)
    dados_mapa = pd.DataFrame({
        "Bairro": ["Centro", "Vila Nova", "Jardim das Flores", "Zona Industrial"],
        "lat": [-23.5505, -23.5432, -23.5555, -23.5600],
        "lon": [-46.6333, -46.6400, -46.6350, -46.6450],
        "Res√≠duos (kg)": [150, 300, 50, 25],
        "Tipo": ["Org√¢nico", "Recicl√°vel", "Eletr√¥nico", "Hospitalar"]
    })
    
    # Filtros para o mapa
    tipo_residuo = st.multiselect(
        "Filtrar por tipo de res√≠duo:",
        options=dados_mapa["Tipo"].unique(),
        default=dados_mapa["Tipo"].unique()
    )
    
    dados_filtrados = dados_mapa[dados_mapa["Tipo"].isin(tipo_residuo)]
    
    # Exibir mapa
    st.map(
        dados_filtrados,
        size='Res√≠duos (kg)',
        color='#0068c9',
        zoom=12
    )
    
    # Tabela de apoio
    st.subheader("Dados de Coleta por Bairro")
    st.dataframe(
        dados_filtrados,
        column_config={
            "lat": "Latitude",
            "lon": "Longitude",
            "Res√≠duos (kg)": st.column_config.NumberColumn(format="%d kg")
        },
        hide_index=True,
        use_container_width=True
    )

# Rodap√©
st.divider()
st.caption(f"¬© {pd.Timestamp.now().year} Secretaria Municipal de Meio Ambiente - Vers√£o 1.0")
