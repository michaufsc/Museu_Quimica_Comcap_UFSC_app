import streamlit as st
import pandas as pd
import random

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Sistema Educacional de Res√≠duos",
    page_icon="‚ôªÔ∏è",
    layout="wide"
)

# Carregar dados
@st.cache_data
def load_data():
    polimeros = pd.read_csv("polimeros.csv", sep=";")
    residuos = pd.read_csv("residuos.csv", sep=";")
    return polimeros, residuos

polimeros, residuos = load_data()

# Atividades Pedag√≥gicas Corrigidas
def mostrar_atividades():
    st.header("üìö Atividades Pedag√≥gicas Pr√°ticas")
    
    with st.expander("üî¨ Para Ensino Fundamental (6¬∫ ao 9¬∫ ano)"):
        st.markdown("""
        ### 1. Jogo da Mem√≥ria dos Pol√≠meros
        **Materiais:** Cart√µes com imagens de pol√≠meros e seus s√≠mbolos de reciclagem  
        **Objetivo:** Associar cada pol√≠mero ao seu s√≠mbolo e aplica√ß√£o  
        **Dura√ß√£o:** 30 minutos

        ### 2. Experimento de Decomposi√ß√£o
        **Materiais:** Amostras de PET, PEAD, vidro, papel e org√¢nicos  
        **Objetivo:** Observar diferen√ßas na degrada√ß√£o dos materiais  
        **Dura√ß√£o:** 2 meses (observa√ß√µes semanais)
        """)
    
    with st.expander("üß™ Para Ensino M√©dio"):
        st.markdown("""
        ### 1. An√°lise de Propriedades
        **Materiais:** Amostras de diferentes pl√°sticos, fonte de calor, √°gua  
        **Objetivo:** Identificar pol√≠meros por densidade e teste de chama  
        **Dura√ß√£o:** 2 aulas

        ### 2. Simula√ß√£o de Cooperativa
        **Materiais:** Res√≠duos diversos, balan√ßas, tabelas de pre√ßos  
        **Objetivo:** Vivenciar processo de triagem e comercializa√ß√£o  
        **Dura√ß√£o:** 3 aulas
        """)
    
    with st.expander("üéì Para Ensino Superior"):
        st.markdown("""
        ### 1. An√°lise de Ciclo de Vida
        **Materiais:** Dados de produ√ß√£o de PET vs PLA  
        **Objetivo:** Comparar impactos ambientais  
        **Dura√ß√£o:** 1 semana

        ### 2. Desenvolvimento de Biopol√≠meros
        **Materiais:** Amido de milho, glicerol, corante  
        **Objetivo:** Produzir pl√°stico biodegrad√°vel  
        **Dura√ß√£o:** 4 aulas
        """)

# Gerar perguntas do quiz baseadas nos CSVs
def generate_quiz_questions():
    questions = []
    
    # Perguntas sobre pol√≠meros
    for _, row in polimeros.iterrows():
        questions.append({
            "pergunta": f"Qual a principal aplica√ß√£o do {row['Nome']} ({row['Sigla']})?",
            "opcoes": [
                row['Aplica√ß√µes Comuns'],
                random.choice(polimeros['Aplica√ß√µes Comuns']),
                random.choice(polimeros['Aplica√ß√µes Comuns']),
                "Nenhuma das anteriores"
            ],
            "resposta": 0,
            "explicacao": f"O {row['Sigla']} √© comumente usado em: {row['Aplica√ß√µes Comuns']}"
        })
        
        questions.append({
            "pergunta": f"O {row['Nome']} ({row['Sigla']}) √© biodegrad√°vel?",
            "opcoes": ["Sim", "N√£o", "Apenas em condi√ß√µes espec√≠ficas", "Depende do processo"],
            "resposta": 0 if row['Biodegrad√°vel'] == 'Sim' else 1,
            "explicacao": f"Biodegradabilidade: {row['Biodegrad√°vel']}"
        })
    
    # Perguntas sobre res√≠duos
    for _, row in residuos.iterrows():
        questions.append({
            "pergunta": f"Como classificar {row['Categoria']} ({row['Sigla ou Nome']}) segundo ABNT?",
            "opcoes": [
                row['Classe ABNT'],
                random.choice(residuos['Classe ABNT']),
                random.choice(residuos['Classe ABNT']),
                "N√£o classific√°vel"
            ],
            "resposta": 0,
            "explicacao": f"Classifica√ß√£o ABNT: {row['Classe ABNT']}"
        })
        
        questions.append({
            "pergunta": f"Qual o destino mais adequado para {row['Categoria']}?",
            "opcoes": [
                row['Destina√ß√£o'],
                "Aterro sanit√°rio",
                "Incinera√ß√£o",
                "Descarte comum"
            ],
            "resposta": 0,
            "explicacao": f"Destina√ß√£o recomendada: {row['Destina√ß√£o']}"
        })
    
    return random.sample(questions, min(20, len(questions)))

# Fun√ß√£o do Quiz
def mostrar_quiz():
    st.header("üß† Quiz de Res√≠duos e Pol√≠meros")
    questions = generate_quiz_questions()
    
    if 'question_index' not in st.session_state:
        st.session_state.question_index = 0
        st.session_state.score = 0
    
    if st.session_state.question_index < len(questions):
        question = questions[st.session_state.question_index]
        
        st.subheader(f"Pergunta {st.session_state.question_index + 1}/{len(questions)}")
        st.markdown(f"**{question['pergunta']}**")
        
        answer = st.radio("Selecione a resposta:", question['opcoes'])
        
        if st.button("Confirmar"):
            if answer == question['opcoes'][question['resposta']]:
                st.success(f"‚úÖ Correto! {question['explicacao']}")
                st.session_state.score += 1
            else:
                st.error(f"‚ùå Errado. Resposta correta: {question['opcoes'][question['resposta']]}")
            
            st.session_state.question_index += 1
            st.experimental_rerun()
    else:
        st.balloons()
        st.success(f"üéØ Quiz completo! Pontua√ß√£o: {st.session_state.score}/{len(questions)}")
        
        if st.button("Refazer Quiz"):
            st.session_state.question_index = 0
            st.session_state.score = 0
            st.experimental_rerun()

# Interface principal
def main():
    tab1, tab2, tab3 = st.tabs([
        "üß† Quiz", 
        "üìö Atividades", 
        "‚ôªÔ∏è Gloss√°rio"
    ])
    
    with tab1:
        mostrar_quiz()
    
    with tab2:
        mostrar_atividades()
    
    with tab3:
        st.header("üìñ Gloss√°rio T√©cnico")
        # Sua implementa√ß√£o existente do gloss√°rio aqui

if __name__ == "__main__":
    main()
