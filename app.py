import streamlit as st
import pandas as pd

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Gloss√°rio Qu√≠mica dos Res√≠duos",
    page_icon="‚ôªÔ∏è",
    layout="wide"
)

st.title("‚ôªÔ∏è Gloss√°rio Interativo ‚Äì Qu√≠mica dos Res√≠duos e Pol√≠meros")

# Menu lateral de navega√ß√£o
menu = st.sidebar.radio("üìö Escolha uma se√ß√£o:", ["Gloss√°rio de Res√≠duos", "Gloss√°rio de Pol√≠meros"])

# Fun√ß√£o para carregar dados de res√≠duos
@st.cache_data
def carregar_residuos():
    return pd.read_csv("residuos.csv")

# Fun√ß√£o para carregar dados de pol√≠meros
@st.cache_data
def carregar_polimeros():
    return pd.read_csv("polimeros.csv")

# ========================
# SE√á√ÉO 1: GLOSS√ÅRIO DE RES√çDUOS
# ========================
if menu == "Gloss√°rio de Res√≠duos":
    df = carregar_residuos()

    busca = st.text_input("üîç Buscar res√≠duo:")

    categorias = st.sidebar.multiselect("Categoria", df["Categoria"].unique(), default=df["Categoria"].unique())
    classes = st.sidebar.multiselect("Classe ABNT", df["Classe ABNT"].unique(), default=df["Classe ABNT"].unique())
    reciclavel = st.sidebar.selectbox("Recicl√°vel", ["Todos"] + list(df["Recicl√°vel"].unique()))

    df_filtrado = df[(df["Categoria"].isin(categorias)) & (df["Classe ABNT"].isin(classes))]
    if reciclavel != "Todos":
        df_filtrado = df_filtrado[df_filtrado["Recicl√°vel"] == reciclavel]
    if busca:
        df_filtrado = df_filtrado[df_filtrado.apply(lambda row: busca.lower() in str(row).lower(), axis=1)]

    st.subheader("üìò Resultados filtrados")
    st.dataframe(df_filtrado, use_container_width=True)

# ========================
# SE√á√ÉO 2: GLOSS√ÅRIO DE POL√çMEROS
# ========================
elif menu == "Gloss√°rio de Pol√≠meros":
    df = carregar_polimeros()

    busca = st.text_input("üîç Buscar pol√≠mero ou aplica√ß√£o:")

    tipos = st.sidebar.multiselect("Tipo de Polimeriza√ß√£o", df["Tipo de Polimeriza√ß√£o"].unique(), default=df["Tipo de Polimeriza√ß√£o"].unique())
    origem = st.sidebar.multiselect("Origem", df["Aquisi√ß√£o"].unique(), default=df["Aquisi√ß√£o"].unique())
    reciclavel = st.sidebar.selectbox("Recicl√°vel", ["Todos"] + list(df["Recicl√°vel"].unique()))

    df_filtrado = df[(df["Tipo de Polimeriza√ß√£o"].isin(tipos)) & (df["Aquisi√ß√£o"].isin(origem))]
    if reciclavel != "Todos":
        df_filtrado = df_filtrado[df_filtrado["Recicl√°vel"] == reciclavel]
    if busca:
        df_filtrado = df_filtrado[df_filtrado.apply(lambda row: busca.lower() in str(row).lower(), axis=1)]

    st.subheader("üìò Pol√≠meros filtrados")
    st.dataframe(df_filtrado, use_container_width=True)

    with st.expander("üîç Visualiza√ß√£o detalhada por pol√≠mero"):
        item = st.selectbox("Selecione um pol√≠mero:", df_filtrado["Nome"])
        dados = df_filtrado[df_filtrado["Nome"] == item].iloc[0]

        col1, col2 = st.columns(2)
        with col1:
            st.markdown(f"**Sigla:** {dados['Sigla']}")
            st.markdown(f"**Tipo de Polimeriza√ß√£o:** {dados['Tipo de Polimeriza√ß√£o']}")
            st.markdown(f"**Tipo de Cadeia:** {dados['Tipo de Cadeia']}")
            st.markdown(f"**Mon√¥mero(s):** {dados['Mon√¥mero(s)']}")

        with col2:
            st.markdown(f"**Composi√ß√£o Qu√≠mica:** {dados['Composi√ß√£o Qu√≠mica']}")
            st.markdown(f"**Origem:** {dados['Aquisi√ß√£o']}")
            st.markdown(f"**Recicl√°vel:** {dados['Recicl√°vel']}")

        st.markdown("**Aplica√ß√µes Comuns:**")
        st.info(dados["Aplica√ß√µes Comuns"])
