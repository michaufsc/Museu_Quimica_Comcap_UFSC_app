# -*- coding: utf-8 -*-
import streamlit as st
import pandas as pd
import random
import os
from PIL import Image
import re
import folium
from streamlit_folium import folium_static
from datetime import datetime

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Sistema Completo de Res√≠duos",
    page_icon="‚ôªÔ∏è",
    layout="wide"
)

# Caminho correto para a pasta de imagens
IMAGES_DIR = "imagens_materiais"

# Carregar dados (pol√≠meros e res√≠duos)
@st.cache_data
def load_data():
    polimeros = pd.read_csv("polimeros.csv", sep=";")
    residuos = pd.read_csv("residuos.csv", sep=";")
    return polimeros, residuos
    
# Adicione esta fun√ß√£o para carregar os dados da coleta seletiva
@st.cache_data
def load_coleta_data():
    url = "https://raw.githubusercontent.com/michaufsc/glossario-quimica-residuos/refs/heads/main/pontos_coleta.csv"
    df = pd.read_csv(url)
    return df

# Carregar perguntas do quiz
@st.cache_data
def load_quiz():
    df = pd.read_csv("quiz_perguntas.csv", sep=";")
    questions = []
    for _, row in df.iterrows():
        opcoes = [str(row['opcao_1']), str(row['opcao_2']), str(row['opcao_3']), str(row['opcao_4'])]
        questions.append({
            "pergunta": row['pergunta'],
            "opcoes": opcoes,
            "resposta": int(row['resposta']),
            "explicacao": row['explicacao']
        })
    random.shuffle(questions)
    return questions

# Carrega os dados
polimeros, residuos = load_data()

# Fun√ß√£o: gloss√°rio interativo
def mostrar_glossario():
    st.header("üìñ Gloss√°rio Interativo de Pol√≠meros e Res√≠duos")
    
    # Sele√ß√£o do tipo de material
    tipo_material = st.radio(
        "Selecione o tipo de material:",
        options=["Pol√≠meros", "Res√≠duos"],
        horizontal=True
    )
    
    # Barra de busca
    termo_busca = st.text_input("üîç Pesquisar por nome, sigla ou aplica√ß√£o:")
    
    # Sele√ß√£o do dataframe apropriado
    df = polimeros if tipo_material == "Pol√≠meros" else residuos
    
    # Dados t√©cnicos espec√≠ficos para materiais selecionados
    DADOS_ESPECIFICOS = {
        'PLA': {
            'Nome': '√Åcido Polil√°tico',
            'Tipo de Polimeriza√ß√£o': 'Policondensa√ß√£o (biodegrad√°vel)',
            'Composi√ß√£o Qu√≠mica': 'Poli√©ster alif√°tico termopl√°stico',
            'Densidade': '1,24-1,27 g/cm¬≥',
            'Ponto de Fus√£o': '150-160¬∞C',
            'Recicl√°vel': 'Sim (compost√°vel industrial)',
            'Aplica√ß√µes Comuns': 'Impress√£o 3D, embalagens aliment√≠cias, utens√≠lios descart√°veis, implantes m√©dicos',
            'Descri√ß√£o': 'PLA (√Åcido Polil√°tico) √© um termopl√°stico biodegrad√°vel derivado de fontes renov√°veis como amido de milho, cana-de-a√ß√∫car ou beterraba. Possui baixa toxicidade e √© amplamente utilizado na fabrica√ß√£o de biopl√°sticos.'
        },
        'PET': {
            'Tipo de Polimeriza√ß√£o': 'Policondensa√ß√£o (termopl√°stico)',
            'Densidade': '1,36 g/cm¬≥',
            'Ponto de Fus√£o': '250-260¬∞C'
        }
    }

    # Filtragem dos dados
    if termo_busca:
        mask = df.astype(str).apply(lambda col: col.str.contains(termo_busca, case=False, na=False)).any(axis=1)
        df = df[mask]

    if df.empty:
        st.info("üîé Nenhum resultado encontrado para sua busca.")
        return

    # Exibi√ß√£o dos itens
    for _, row in df.iterrows():
        with st.container():
            sigla = row.get("Sigla", row.get("Sigla ou Nome", "SEM_SIGLA"))
            
            # Atualiza os dados com informa√ß√µes espec√≠ficas se existirem
            row_atualizado = row.copy()
            if sigla in DADOS_ESPECIFICOS:
                for chave, valor in DADOS_ESPECIFICOS[sigla].items():
                    row_atualizado[chave] = valor

            col1, col2 = st.columns([1, 3], gap="medium")
            
            # Coluna 1 - Imagem
            with col1:
                nome_imagem = f"{sigla.lower()}.png"
                caminho_imagem = os.path.join(IMAGES_DIR, nome_imagem)
                
                if os.path.exists(caminho_imagem):
                    st.image(
                        Image.open(caminho_imagem),
                        use_container_width=True,
                        caption=f"S√≠mbolo {sigla}"
                    )
                else:
                    cor = (200, 230, 200) if sigla == 'PLA' else (240, 240, 240)
                    img_padrao = Image.new('RGB', (300, 300), color=cor)

                    try:
                        draw = ImageDraw.Draw(img_padrao)
                        font = ImageFont.load_default()
                        text = sigla if len(sigla) <= 4 else sigla[:4]
                        w, h = draw.textsize(text, font=font)
                        draw.text(((300 - w) / 2, (300 - h) / 2), text, fill="white", font=font)
                    except Exception as e:
                        pass

                    st.image(
                        img_padrao,
                        use_container_width=True,
                        caption=f"Imagem ilustrativa - {sigla}"
                    )
            
            # Coluna 2 - Informa√ß√µes
            with col2:
                st.subheader(row_atualizado.get("Nome", row_atualizado.get("Categoria", "Sem nome")))
                
                if sigla == 'PLA':
                    st.success("‚ôªÔ∏è MATERIAL BIODEGRAD√ÅVEL E RENOV√ÅVEL")
                
                col_info1, col_info2 = st.columns(2)
                
                with col_info1:
                    st.markdown(f"""
                    **üî§ Sigla:**  
                    {sigla}  
                    
                    **üß™ Tipo de Polimeriza√ß√£o:**  
                    {row_atualizado.get('Tipo de Polimeriza√ß√£o', 'N√£o especificado')}  
                    
                    **üìä Densidade:**  
                    {row_atualizado.get('Densidade', 'N√£o especificado')}
                    """)
                
                with col_info2:
                    st.markdown(f"""
                    **üî• Ponto de Fus√£o:**  
                    {row_atualizado.get('Ponto de Fus√£o', 'N√£o especificado')}  
                    
                    **üîÑ Recicl√°vel:**  
                    {row_atualizado.get('Recicl√°vel', 'N√£o especificado')}  
                    
                    **üß™ Composi√ß√£o:**  
                    {row_atualizado.get('Composi√ß√£o Qu√≠mica', 'N√£o especificado')}
                    """)
                
                if sigla in DADOS_ESPECIFICOS and 'Descri√ß√£o' in DADOS_ESPECIFICOS[sigla]:
                    with st.expander("üìù Descri√ß√£o Detalhada"):
                        st.write(DADOS_ESPECIFICOS[sigla]['Descri√ß√£o'])
                
                with st.expander("üì¶ Aplica√ß√µes Comuns"):
                    st.write(row_atualizado.get('Aplica√ß√µes Comuns', row_atualizado.get('Aplica√ß√µes ou Exemplos', 'N√£o especificado')))

        st.divider()
# Fun√ß√£o: quiz interativo
def mostrar_quiz():
    st.header("üßê Quiz de Res√≠duos e Pol√≠meros")

    # Inicializa o estado do quiz
    if 'questions' not in st.session_state:
        st.session_state.questions = load_quiz()
        st.session_state.current_question = 0
        st.session_state.score = 0

    questions = st.session_state.questions
    q_num = st.session_state.current_question

    # Se terminou o quiz
    if q_num >= len(questions):
        score = st.session_state.score
        total = len(questions)
        percentual = score / total
        st.balloons()
        st.success(f"üéØ Pontua√ß√£o Final: {score}/{total}")

        if percentual == 1:
            st.info("üåü Excelente! Voc√™ acertou tudo!")
        elif percentual >= 0.75:
            st.info("üëè Muito bom! Voc√™ tem um bom dom√≠nio do conte√∫do.")
        elif percentual >= 0.5:
            st.warning("üîç Razo√°vel, mas vale revisar os materiais.")
        else:
            st.error("üìö Vamos estudar mais um pouco? Explore o gloss√°rio!")

        if st.button("üîÑ Refazer Quiz"):
            for key in list(st.session_state.keys()):
                if key.startswith("q") or key.startswith("b") or key.startswith("respondido") or key.startswith("correta"):
                    del st.session_state[key]
            del st.session_state.questions
            del st.session_state.current_question
            del st.session_state.score
        return

    # Exibe a pergunta atual
    question = questions[q_num]
    st.progress((q_num + 1) / len(questions))
    st.subheader(f"Pergunta {q_num + 1} de {len(questions)}")
    st.markdown(f"**{question['pergunta']}**")

    # Widget de escolha
    selected = st.radio("Escolha uma alternativa:", question['opcoes'], key=f"q{q_num}")

    # Bot√£o de confirmar
    if f"respondido_{q_num}" not in st.session_state:
        if st.button("‚úÖ Confirmar", key=f"b{q_num}"):
            st.session_state[f"respondido_{q_num}"] = True
            correta = selected == question['opcoes'][question['resposta']]
            st.session_state[f"correta_{q_num}"] = correta
            if correta:
                st.session_state.score += 1

    # Mostra resultado e bot√£o pr√≥xima
    if st.session_state.get(f"respondido_{q_num}", False):
        correta = st.session_state[f"correta_{q_num}"]
        if correta:
            st.success(f"‚úÖ Correto! {question['explicacao']}")
        else:
            st.error(f"‚ùå Errado. {question['explicacao']}")

        if st.button("‚û°Ô∏è Pr√≥xima pergunta"):
            st.session_state.current_question += 1


# Fun√ß√£o: hist√≥ria do Museu
def mostrar_historia():
    st.header("üèõÔ∏è Museu do Lixo ‚Äì Hist√≥ria e Agenda")

    st.markdown("""
O **Museu do Lixo**, instalado pela Comcap em **25 de setembro de 2003**, tornou-se uma refer√™ncia em **educa√ß√£o ambiental** em Santa Catarina. Sua abordagem l√∫dica e acess√≠vel refor√ßa conceitos de **consumo consciente** com base nos quatro √©rres (4Rs): **Repensar, Reduzir, Reutilizar e Reciclar**.

O museu nasceu do sonho de mais de dez anos de trabalhadores da Comcap, que desejavam **resgatar objetos descartados** para criar um espa√ßo de mem√≥ria sobre os h√°bitos de consumo da sociedade.

As primeiras pe√ßas foram reunidas no antigo galp√£o de triagem da coleta seletiva. Atualmente, o acervo est√° disposto em **ambientes tem√°ticos**, montados e decorados com **materiais reaproveitados** ‚Äî desde as tintas das paredes at√© a mandala do piso, tudo feito com res√≠duos reciclados.

---

### üïì Hor√°rio de Funcionamento  
üìÖ Segunda a sexta-feira  
üïó Das 8h √†s 17h

**Visitas monitoradas devem ser agendadas:**  
üìû (48) 3261-4808  
üìß ambiental.comcap@pmf.sc.gov.br

---

### üìç Localiza√ß√£o  
Rodovia Admar Gonzaga, 72 ‚Äì Bairro Itacorubi, Florian√≥polis ‚Äì SC
""")

    st.markdown("""
### üîç Saiba mais

- O museu integra o roteiro de **visita√ß√£o monitorada ao Centro de Valoriza√ß√£o de Res√≠duos (CVR)** da Comcap, empresa de economia mista da Prefeitura de Florian√≥polis.  
- Recebe cerca de **7 mil visitantes por ano**, mediante agendamento pr√©vio.  
- O acervo conta com aproximadamente **10 mil itens** recuperados na coleta ou por **entrega volunt√°ria**, ainda em processo de cataloga√ß√£o.  
- A instala√ß√£o ocupa uma √°rea de **200 m¬≤**.  
- Cole√ß√µes em destaque: ferros de passar roupa, latas de refrigerante e de cerveja, m√°quinas fotogr√°ficas e de costura, aparelhos de telefone e computadores.  
- Os ambientes s√£o decorados com **materiais reutilizados**, desde tintas at√© pisos.  
- Foram criados personagens para as atividades educativas, como **Neiciclagem** (Valdinei Marques), **Dona Tainha** (Joseane Rosa), **Vento Sul** e **Reciclardo** (Ricardo Concei√ß√£o).

---
""")
#fun√ß√£o qu√≠mica 
def mostrar_quimica():
    st.header("üß™ Qu√≠mica dos Pol√≠meros e Reciclagem")

    st.markdown("""
    Os **pol√≠meros** s√£o macromol√©culas formadas por unidades repetitivas chamadas mon√¥meros. Eles podem ser naturais, como a celulose, ou sint√©ticos, como:
    - Polietileno (PE)
    - Polipropileno (PP)
    - Poli(tereftalato de etileno) (PET)
    - Poli(cloreto de vinila) (PVC)
    - Poliestireno (PS)

    Os **termopl√°sticos**, como PE, PP, PET, PVC e PS, possuem as seguintes caracter√≠sticas:
    - Mold√°veis a quente
    - Baixa densidade
    - Boa apar√™ncia
    - Isolantes t√©rmico e el√©trico
    - Resistentes ao impacto
    - Baixo custo

    No Brasil, o consumo de termopl√°sticos tem crescido significativamente. Por exemplo, o PET apresentou um aumento de mais de **2.200%** na √∫ltima d√©cada.

    A **separa√ß√£o automatizada** de pol√≠meros √© realizada com base na diferen√ßa de densidade, utilizando tanques de flota√ß√£o ou hidrociclones para:
    - PE
    - PP
    - PS
    - PVC
    - PET

    A **reciclagem** desses materiais envolve tecnologias mec√¢nicas e qu√≠micas, al√©m da recupera√ß√£o de energia a partir de res√≠duos pl√°sticos.

    Empresas recicladoras de PE e PP processam entre 20 e 50 toneladas por m√™s, com poucas ultrapassando 100 toneladas mensais. As principais aplica√ß√µes dos pol√≠meros reciclados s√£o em utilidades dom√©sticas.
    """)

# Fun√ß√£o: compostagem
def mostrar_compostagem():
    st.header("üå± Compostagem com Res√≠duos Org√¢nicos")

    st.markdown("""
A **compostagem artesanal**, por meio da reciclagem de res√≠duos org√¢nicos, traz de volta √† cidade a beleza e o equil√≠brio das paisagens naturais. Al√©m disso, a separa√ß√£o correta dos res√≠duos facilita a destina√ß√£o dos recicl√°veis secos para a coleta seletiva.
""")

    st.subheader("‚úÖ O que pode ir para a compostagem:")
    st.markdown("""
- Frutas, legumes e verduras  
- Cascas de ovos  
- Borra de caf√© com filtro  
- Folhas secas e grama  
- Serragem e palha  
- Restos de poda triturados
""")

    st.subheader("‚ùå O que N√ÉO pode ir para a compostagem:")
    st.markdown("""
- Carnes, latic√≠nios e peixes  
- Excrementos de animais dom√©sticos  
- √ìleos, gorduras e produtos qu√≠micos  
- Itens sanit√°rios ou pl√°sticos
""")

    st.subheader("üß™ Como funciona a compostagem")
    st.markdown("""
A compostagem cria um ambiente prop√≠cio √† a√ß√£o de **bact√©rias e fungos** que decomp√µem a mat√©ria org√¢nica. Tamb√©m participam do processo **minhocas, insetos e embu√°s**, transformando os res√≠duos em um **composto org√¢nico**, uma terra escura, f√©rtil e rica em nutrientes.

Esse composto pode ser usado em hortas, vasos, jardins e √°reas p√∫blicas, ajudando a regenerar o solo e fechar o ciclo dos alimentos.
""")

    st.subheader("üìä Dados de Florian√≥polis")
    st.markdown("""
- **35%** dos res√≠duos domiciliares s√£o org√¢nicos  
  - 24%: restos de alimentos  
  - 11%: res√≠duos verdes (podas, folhas, jardinagem)  
- **43%** s√£o recicl√°veis secos  
- **22%** s√£o rejeitos (lixo n√£o recicl√°vel)

Das **193 mil toneladas** coletadas anualmente, **70 mil toneladas** s√£o res√≠duos org√¢nicos. Separando-os na fonte, evitar√≠amos o envio de **27 caminh√µes de lixo por dia** ao aterro de Bigua√ßu.
""")

    st.subheader("üí∞ Economia e benef√≠cios")
    st.markdown("""
Cada tonelada aterrada custa **R$ 156,81** ao munic√≠pio.  
Com compostagem, Florian√≥polis poderia economizar at√© **R$ 11 milh√µes por ano**, al√©m de reduzir impactos ambientais e melhorar a qualidade do solo urbano.
""")

    st.subheader("üìö Materiais e links √∫teis")
    st.markdown("""
- [\U0001F4D8 **Manual de Compostagem com Minhocas: Projeto Minhoca na Cabe√ßa**](https://cepagroagroecologia.wordpress.com/minhoca-na-cabeca/)  
- [\U0001F3A5 **V√≠deo sobre valoriza√ß√£o dos org√¢nicos em Florian√≥polis**](https://www.youtube.com/watch?v=xyz)  
- [\U0001F4D7 **Manual de Compostagem: MMA, Cepagro, SESC-SC**](https://www.mma.gov.br)  
- [\U0001F4D2 **Livreto: Compostagem Comunit√°ria ‚Äì Guia Completo**](https://compostagemcomunitaria.com.br)
""")
import streamlit as st
import pandas as pd
import folium
from streamlit_folium import folium_static

def mostrar_coleta_seletiva():
    st.header("üèòÔ∏è Coleta Seletiva por Bairro")

    # Carrega os dados do GitHub
    df = load_coleta_data()

    # Sidebar com filtros
    with st.sidebar:
        st.subheader("üîé Filtros")
        bairros = sorted(df['nome'].str.extract(r'^(.*?)(?=\s*-)')[0].dropna().unique())
        bairro_selecionado = st.selectbox("Selecione um bairro:", options=["Todos"] + bairros)

        tipos_disponiveis = list(df['tipo'].unique())
        tipo_selecionado = st.radio("Tipo de ponto:", options=["Todos"] + tipos_disponiveis)

    # Filtro por bairro
    dados_filtrados = df.copy()
    if bairro_selecionado != "Todos":
        dados_filtrados = dados_filtrados[dados_filtrados['nome'].str.contains(bairro_selecionado, case=False)]

    # Filtro por tipo
    if tipo_selecionado != "Todos":
        dados_filtrados = dados_filtrados[dados_filtrados['tipo'] == tipo_selecionado]

    # Estat√≠sticas r√°pidas
    col1, col2 = st.columns(2)
    with col1:
        st.metric("Pontos exibidos", len(dados_filtrados))
    with col2:
        st.metric("Total no banco", len(df))

    st.markdown("---")
    st.subheader("üìç Mapa de Pontos de Coleta")

    # Mapa com marcadores
    m = folium.Map(location=[-27.5969, -48.5495], zoom_start=12, tiles="CartoDB positron")

    for _, row in dados_filtrados.iterrows():
        popup = f"""
        <b>{row['nome']}</b><br>
        <b>Tipo:</b> {row['tipo']}<br>
        <b>Dias:</b> {row.get('dias_coleta', 'N√£o informado')}<br>
        <b>Hor√°rio:</b> {row.get('horario', 'N√£o informado')}
        """
        folium.Marker(
            location=[row['latitude'], row['longitude']],
            popup=popup,
            icon=folium.Icon(color='green' if row['tipo'] == 'PEV' else 'blue', icon='recycle' if row['tipo'] == 'PEV' else 'trash')
        ).add_to(m)

    folium_static(m, width=800, height=500)

    # Legenda
    st.markdown("""
    **Legenda:**  
    üü¢ PEVs (Pontos de Entrega Volunt√°ria)  
    üîµ Pontos de Coleta Regular
    """)

    # Tabela
    st.markdown("---")
    st.subheader("üìã Detalhes dos Pontos")

    st.dataframe(
        dados_filtrados[['nome', 'tipo', 'dias_coleta', 'horario']].rename(columns={
            'nome': 'Local',
            'tipo': 'Tipo',
            'dias_coleta': 'Dias de Coleta',
            'horario': 'Hor√°rio'
        }),
        height=400,
        use_container_width=True
    )

    # Informa√ß√µes educativas
    st.markdown("---")
    st.subheader("‚ÑπÔ∏è Como Funciona a Coleta Seletiva")
    col1, col2 = st.columns(2)

    with col1:
        st.markdown("""
        ### ‚úÖ Materiais Aceitos
        - Papel, papel√£o e jornais  
        - Pl√°sticos (limpos e secos)  
        - Vidros (sem tampas)  
        - Metais (latas, arames)
        """)

    with col2:
        st.markdown("""
        ### ‚ùå Materiais Recusados
        - Lixo org√¢nico  
        - Fraldas descart√°veis  
        - Espelhos e cer√¢micas  
        - Embalagens sujas
        """)

    st.markdown("*Fonte: [Programa de Coleta Seletiva de Florian√≥polis](https://www.pmf.sc.gov.br/)*")


# Fun√ß√£o principal
def main():
    st.header("Museu do Lixo - COMCAP Florian√≥polis ‚ôªÔ∏è")
    st.subheader("Aplicativo para educadores: Qu√≠mica dos res√≠duos")
    st.markdown("*Desenvolvido durante a disciplina de Pr√°tica de Ensino em Espa√ßos de Divulga√ß√£o Cient√≠fica (Ext 18h)*")
    st.markdown("---")

    # Abas principais com novas se√ß√µes
    tab1, tab2, tab3, tab4, tab5, tab6, tab7, tab8, tab9, tab10 = st.tabs([
        "üèõÔ∏è Hist√≥ria do Museu",
        "üè∑Ô∏è Gloss√°rio",
        "üßê Quiz",
        "üå± Compostagem",
        "üß™ Qu√≠mica dos Pol√≠meros",
        "üèòÔ∏è Coleta Seletiva por Bairro",
        "üßµ Micropl√°sticos",
        "ü§ù Associa√ß√µes de Reciclagem",
        "üìö Atividades Pedag√≥gicas",
        "‚ÑπÔ∏è Sobre"
    ])

    with tab1:
        mostrar_historia()

    with tab2:
        mostrar_glossario()

    with tab3:
        mostrar_quiz()

    with tab4:
        mostrar_compostagem()

    with tab5:
        mostrar_quimica()

    with tab6:
        mostrar_coleta_seletiva()

    with tab7:
        st.header("üßµ Micropl√°sticos")
        st.markdown("Conte√∫do sobre micropl√°sticos ainda ser√° adicionado.")

    with tab8:
        st.header("ü§ù Associa√ß√µes de Reciclagem")
        st.markdown("Conte√∫do sobre cooperativas e associa√ß√µes ser√° adicionado aqui.")

    with tab9:
        st.header("üìö Atividades Pedag√≥gicas")
        st.markdown("Sugest√µes de atividades educativas sobre res√≠duos e meio ambiente.")

    with tab10:
        st.header("‚ÑπÔ∏è Sobre o Projeto")
        st.markdown("""
**Gloss√°rio Interativo de Res√≠duos e Pol√≠meros**  
- Desenvolvido para educa√ß√£o ambiental  
- Dados t√©cnicos baseados em normas ABNT  
- Integrado com atividades pedag√≥gicas  
""")
        st.markdown("""
**Autor:** nome dos alunos e professora  
**Disciplina:** Pr√°tica de Ensino em Espa√ßos de Divulga√ß√£o Cient√≠fica (Ext 18h-a)  
**Institui√ß√£o:** Universidade Federal de Santa Catarina (UFSC)
""")

# Execu√ß√£o do app
if __name__ == "__main__":
    if not os.path.exists(IMAGES_DIR):
        os.makedirs(IMAGES_DIR)
    main()

