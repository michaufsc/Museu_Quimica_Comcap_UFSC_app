import streamlit as st
import pandas as pd
from PIL import Image
import os

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Gloss√°rio de Res√≠duos com Imagens",
    page_icon="‚ôªÔ∏è",
    layout="wide"
)

# Configura√ß√£o de caminhos
IMAGES_DIR = "imagens_materiais"

# Fun√ß√£o para carregar dados com cache
@st.cache_data
def load_data(file_path):
    try:
        return pd.read_csv(file_path, sep=";", encoding='utf-8')
    except Exception as e:
        st.error(f"Erro ao carregar {file_path}: {str(e)}")
        return pd.DataFrame()

# Carregar dados
polimeros = load_data("polimeros.csv")
residuos = load_data("residuos.csv")

# Fun√ß√£o para exibir material com imagem
def display_material(row):
    sigla = row['Sigla'] if 'Sigla' in row else row['Sigla ou Nome']
    image_path = os.path.join(IMAGES_DIR, f"{sigla.lower()}.jpg")
    
    col1, col2 = st.columns([1, 3])
    
    with col1:
        if os.path.exists(image_path):
            st.image(Image.open(image_path), 
                   caption=f"Imagem de {sigla}",
                   width=200)
        else:
            st.warning("Imagem n√£o dispon√≠vel")
    
    with col2:
        st.markdown(f"""
        ### {row['Nome'] if 'Nome' in row else row['Categoria']} ({sigla})
        
        **Tipo:** {row.get('Tipo de Polimeriza√ß√£o', row.get('Classe ABNT', '-'))}  
        **Composi√ß√£o:** {row.get('Composi√ß√£o Qu√≠mica', '-')}  
        **Recicl√°vel:** {row.get('Recicl√°vel', '-')}  
        **Aplica√ß√µes:** {row.get('Aplica√ß√µes Comuns', row.get('Aplica√ß√µes ou Exemplos', '-'))}  
        **Impacto Ambiental:** {row.get('Impacto Ambiental', row.get('Perigo Potencial', '-'))}
        """)

# Interface principal
def main():
    st.title("üîç Gloss√°rio Interativo de Res√≠duos")
    
    # Sele√ß√£o do dataset
    dataset = st.radio(
        "Selecione a base de dados:",
        ["Pol√≠meros", "Res√≠duos"],
        horizontal=True
    )
    
    df = polimeros if dataset == "Pol√≠meros" else residuos
    
    if df.empty:
        st.warning("Dados n√£o carregados corretamente.")
        return
    
    # Sistema de busca
    search_term = st.text_input("Buscar por material, aplica√ß√£o ou caracter√≠stica:")
    
    # Filtragem dos dados
    if search_term:
        mask = df.apply(
            lambda row: row.astype(str).str.contains(search_term, case=False).any(),
            axis=1
        )
        filtered_df = df[mask]
    else:
        filtered_df = df
    
    # Exibi√ß√£o dos resultados
    if filtered_df.empty:
        st.warning("Nenhum material encontrado com os crit√©rios de busca.")
    else:
        st.subheader(f"Resultados ({len(filtered_df)} encontrados)")
        
        for _, row in filtered_df.iterrows():
            display_material(row)
            st.divider()

# Verifica√ß√£o e execu√ß√£o
if __name__ == "__main__":
    if not os.path.exists(IMAGES_DIR):
        os.makedirs(IMAGES_DIR)
        st.warning(f"Pasta '{IMAGES_DIR}' criada. Adicione suas imagens l√°.")
    
    main()
